require 'json-schema'

# can't pass a variable list of ids as rake task args
VISIT_IDS = ENV['VISIT_IDS'].try(:split, ' ')

namespace :json_schema do
  desc "validate all HcVisit data against JSON schema"
  task :validate => :environment do
    snapshots = Province.scoped.inject({}) do |hash, province|
      hash[province.code] = ConfigSnapshot.new(:province_code => province.code)
      hash[province.code].capture!
      hash
    end

    visits = VISIT_IDS ? HcVisit.where(:id => VISIT_IDS) : HcVisit.scoped
    visits.each_with_index do |hcv,idx|
      hcv_schema = snapshots[hcv.province_code].json_schema
      errors = JSON::Validator.fully_validate hcv_schema, hcv.data
      if errors.any?
        puts '-' * 78
        puts "HcVisit[#{idx}] ID: #{hcv.id}:"
        puts errors
        puts
        puts JSON.pretty_generate(hcv.data)
      end
    end
  end

  desc "cleanup known hc_visit JSON issues generated by offline code"
  task :repair_data => :environment do
    snapshots = Province.scoped.inject({}) do |hash, province|
      hash[province.code] = ConfigSnapshot.new(:province_code => province.code)
      hash[province.code].capture!
      hash
    end

    visits = VISIT_IDS ? HcVisit.where(:id => VISIT_IDS) : HcVisit.scoped
    visits.each_with_index do |hcv,idx|
      hcv_schema = snapshots[hcv.province_code].json_schema
      errors = JSON::Validator.fully_validate hcv_schema, hcv.data
      next if errors.none?

      data = cleanup_firefox_type_bug(hcv.data)
      %w(id state screenStates).each {|f| data.delete(f) }

      #------------------------------------------------------------------------#
      # additional cleanup (to fix in offline js code still):
      #------------------------------------------------------
      data['observations']['verified_by_title'] ||= 'Field Officer'

      if data['visited'] == true
        data['non_visit_reason'] = nil
        data['other_non_visit_reason'] = nil
      elsif data['visited'] == false
        data.delete 'refrigerators'
        data.delete 'epi_inventory'
        data.delete 'rdt_inventory'
        data.delete 'equipment_status'
        data.delete 'stock_cards'
        data['visited_at'] = nil
        data['vehicle_id'] = nil
      else
        # don't do anything if 'visited' is null/unknown (just in case)
      end

      if data['refrigerators']
        data['refrigerators'].each do |refrigerator|
          running_problems = refrigerator['running_problems']
          if running_problems && running_problems.empty?
            refrigerator['running_problems'] = nil
          end
        end
        data['refrigerators'].reject! {|r| r.values.none? }
        data.delete('refrigerators') if data['refrigerators'].empty?
      end

      #------------------------------------------------------------------------#

      hcv.data = data
      hcv.save! if hcv.changed?
    end
  end

  def cleanup_firefox_type_bug(data)
    # firefox was returning 'text' as the HTML element's type for 'number'
    # fields and was thus serializing its data as strings instead of numbers.
    # fixed in offline javascript code but may take 1-2 months to propagate
    screens = %w(epi_inventory rdt_inventory rdt_stock epi_stock
      full_vac_tally child_vac_tally adult_vac_tally)

    screens.each do |screen|
      next if data[screen].nil?
      data[screen].each do |k1,v1|
        v1.each {|k2,v2| data[screen][k1][k2] = (v2 =~ /^(\d+)$/ ? $1.to_i : v2) }
      end
    end

    (data['refrigerators']||[]).each do |refrigerator|
      refrigerator['temperature'] = case refrigerator['temperature']
        when /^(-?[\d]+)$/ then $1.to_i
        when /^(-?[\d]+\.[\d]+)$/ then $1.to_f
        else refrigerator['temperature']
      end
    end

    data
  end

end


